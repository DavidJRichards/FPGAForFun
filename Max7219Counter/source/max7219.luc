module max7219 (
    input clk,  // clock
    input rst,  // reset
    input addr_in[8],
    input din[8],
    input start,
    output cs,
    output dout,
    output sck,
    output busy
  ) {
  
  .clk (clk) {
  .rst(rst) { 
      fsm state(#INIT(IDLE)) = {IDLE, TRANSFER_ADDR, TRANSFER_DATA};
      spi_master spi(#CLK_DIV(5),.miso(0));
      dff data[8];
      dff addr[8];
      dff load_state;
    }
  }
  
  sig data_out[8];
  sig mosi;
  counter count;

  always  {
    sck = spi.sck;
    // synchronize our counter with the spi clock so we can keep up with where we are
    count.clk = spi.sck;
    count.rst = 0;
    
    data_out = 8b0;
    spi.start = 0;
    mosi = 0;
    busy = state.q != state.IDLE;  // busy when not idle
    dout = 0;
    
    case (state.q) {
      state.IDLE:
        load_state.d = 1;
        if (start) { // if we should start a new transfer
          // save our data and address values to memory
          addr.d = addr_in;
          data.d = din;
          count.rst = 1;
          
          // Toggle the load pin (makes the 7219 start listening for data)
          load_state.d = 0;
          
          state.d = state.TRANSFER_ADDR;
        }
      state.TRANSFER_ADDR:
        spi.start = 1;
        data_out = addr.q;
        dout = spi.mosi;
        if (count.value == 8){
          state.d = state.TRANSFER_DATA;
        }
      state.TRANSFER_DATA:  
        spi.start = 1;
        data_out = data.q;
        dout = spi.mosi;
        if (count.value == 16){
          // latch the data by pulsing the load pin (cs)
          load_state.d = 1;
          count.rst = 1;
          state.d = state.IDLE;
        }
    }
    
    cs = load_state.q;
    spi.data_in = data_out;
  }
}
